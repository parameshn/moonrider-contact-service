package com.moonrider.zamazon.repository;

import com.moonrider.zamazon.entity.Contact;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;


import java.util.List;
import java.util.Optional;

public interface ContactRepository extends JpaRepository<Contact, Long> {

    //We are writing custom query, since soft-deleted records,handling null and other complex logic can't be generated by
    // Spring Data JPA alone.


    // Finds all active (not soft-deleted) contacts that match either the given
    // email or phone number.
    @Query("SELECT c FROM Contact c WHERE c.deletedAt IS NULL AND (c.email = :email OR c.phoneNumber = :phoneNumber)")
    List<Contact> findByEmailOrPhoneNumber(@Param("email") String email, @Param("phoneNumber") String phoneNumber);

    // Finds all active contacts whose linkedId matches the provided ID.
    // This returns all "secondary" records that are part of the same cluster.
    @Query("SELECT c FROM Contact c WHERE c.deletedAt IS NULL AND c.linkedId = :linkedId")
    List<Contact> findByLinkedId(@Param("linkedId") Long linkedId);

    // Retrieves a contact by its ID, but only if it's not soft-deleted.
    @Query("SELECT c FROM Contact c WHERE c.deletedAt IS NULL AND c.id = :id")
    Optional<Contact> findActiveById(@Param("id") Long id);

    // Retrieves the primary contact for a given linkedId, or finds a primary with
    // that ID itself.

    // This is used to trace a contact's cluster back to its root primary.

    /*
     * This logic assumes that either:
     * - the ID passed is a primary ID (c.id = :linkedId), OR
     * - it's the ID of a secondary (c.linkedId = :linkedId)
     */
    @Query("SELECT c FROM Contact c WHERE c.deletedAt IS NULL AND c.linkPrecedence = 'PRIMARY' AND (c.linkedId = :linkedId OR c.id = :linkedId)")
    Optional<Contact> findPrimaryByLinkedId(@Param("linkedId") Long linkedId);
} 